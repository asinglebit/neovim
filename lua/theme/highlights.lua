local hl = vim.api.nvim_set_hl
local theme = {}


theme.set_highlights = function(opts)
    local colors = require('theme.colors')
    hl(0, 'DashboardChart',                          { fg = colors.grey_800,     bg = colors.grey_900 })
    hl(0, 'DashboardCommits',                        { fg = colors.grey_700,     bg = colors.grey_900 })
    hl(0, 'Normal',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'ColorColumn',                             { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Cursor',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'CursorLine',                              { bg = colors.grey_800 })
    hl(0, 'CursorColumn',                            { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Directory',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'DiffAdd',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'DiffChange',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'DiffDelete',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'DiffText',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'EndOfBuffer',                             { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'ErrorMsg',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'VertSplit',                               { fg = colors.grey_800,     bg = colors.grey_900 })
    hl(0, 'WinSeparator',                            { fg = colors.grey_800,     bg = colors.grey_900 })
    hl(0, 'Folded',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'FoldColumn',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SignColumn',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'IncSearch',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'LineNr',                                  { fg = colors.grey_600,     bg = colors.grey_900 })
    hl(0, 'CursorLineNr',                            { fg = colors.grey_600,     bg = colors.grey_900 })
    hl(0, 'MatchParen',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'ModeMsg',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'MoreMsg',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'NonText',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Pmenu',                                   { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'PmenuSel',                                { fg = colors.grey_400,     bg = colors.grey_800 })
    hl(0, 'PmenuSbar',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'PmenuThumb',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Question',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Search',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpecialKey',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'StatusLine',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'StatusLineNC',                            { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'TabLine',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'TabLineFill',                             { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'TabLineSel',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Title',                                   { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Visual',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'VisualNOS',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'WarningMsg',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'WildMenu',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Comment',                                 { fg = colors.comments,     })
    hl(0, 'Constant',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'String',                                  { fg = colors.strings,      })
    hl(0, 'Character',                               { fg = colors.strings,      })
    hl(0, 'Number',                                  { fg = colors.numbers,      })
    hl(0, 'Boolean',                                 { fg = colors.numbers,      })
    hl(0, 'Float',                                   { fg = colors.numbers,      })
    hl(0, 'Identifier',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Function',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Statement',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Conditional',                             { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Repeat',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Label',                                   { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Operator',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Keyword',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Exception',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'PreProc',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Include',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Define',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Macro',                                   { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Type',                                    { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'StorageClass',                            { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Structure',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Typedef',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Special',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpecialChar',                             { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Tag',                                     { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Delimiter',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpecialComment',                          { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Debug',                                   { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Underlined',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Conceal',                                 { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Ignore',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Error',                                   { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Todo',                                    { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpellBad',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpellCap',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpellRare',                               { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'SpellLocal',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'Whitespace',                              { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'NormalFloat',                             { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'WinBar',                                  { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'WinBarNc',                                { fg = colors.grey_400,     bg = colors.grey_900 })
    hl(0, 'QuickFixLine',                            { fg = colors.grey_400,     bg = colors.grey_900 })

    -- Treesitter
    hl(0, '@error',                                  { fg = colors.errors     })
    hl(0, '@punctuation.bracket',                    { fg = colors.brackets   })
    hl(0, '@punctuation.special',                    { fg = colors.brackets   })
    hl(0, '@punctuation.delimiter',                  { fg = colors.delimiters })
    hl(0, '@comment',                                { fg = colors.comments   })
    hl(0, '@comment.note',                           { fg = colors.types      })
    hl(0, '@comment.warning',                        { fg = colors.functions  })
    hl(0, '@comment.error',                          { fg = colors.errors     })
    hl(0, '@constant',                               { fg = colors.enums      })
    hl(0, '@constant.builtin',                       { fg = colors.keywords   })
    hl(0, '@constant.macro',                         { fg = colors.types      })
    hl(0, '@string.regexp',                          { fg = colors.strings    })
    hl(0, '@string',                                 { fg = colors.strings    })
    hl(0, '@character',                              { fg = colors.strings    })
    hl(0, '@number',                                 { fg = colors.numbers    })
    hl(0, '@number.float',                           { fg = colors.numbers    })
    hl(0, '@boolean',                                { fg = colors.keywords   })
    hl(0, '@annotation',                             { fg = colors.functions  })
    hl(0, '@attribute',                              { fg = colors.functions  })
    hl(0, '@attribute.builtin',                      { fg = colors.types      })
    hl(0, '@module',                                 { fg = colors.types      })
    hl(0, '@function',                               { fg = colors.functions  })
    hl(0, '@function.builtin',                       { fg = colors.functions  })
    hl(0, '@function.macro',                         { fg = colors.functions  })
    hl(0, '@function.method',                        { fg = colors.functions  })
    hl(0, '@define',                                 { fg = colors.keywords   })
    hl(0, '@variable',                               { fg = colors.variables  })
    hl(0, '@variable.builtin',                       { fg = colors.keywords   })
    hl(0, '@variable.parameter',                     { fg = colors.variables  })
    hl(0, '@variable.parameter.reference',           { fg = colors.variables  })
    hl(0, '@variable.member',                        { fg = colors.variables  })
    hl(0, '@property',                               { fg = colors.variables  })
    hl(0, '@constructor',                            { fg = colors.keywords   })
    hl(0, '@label',                                  { fg = colors.variables  })
    hl(0, '@keyword',                                { fg = colors.keywords   })
    hl(0, '@keyword.conditional',                    { fg = colors.keywords   })
    hl(0, '@keyword.repeat',                         { fg = colors.keywords   })
    hl(0, '@keyword.return',                         { fg = colors.keywords   })
    hl(0, '@keyword.exception',                      { fg = colors.keywords   })
    hl(0, '@keyword.import',                         { fg = colors.keywords   })
    hl(0, '@operator',                               { fg = colors.comments   })
    hl(0, '@type',                                   { fg = colors.types      })
    hl(0, '@type.qualifier',                         { fg = colors.keywords   })
    hl(0, '@structure',                              { fg = colors.variables  })
    hl(0, '@tag',                                    { fg = colors.keywords   })
    hl(0, '@tag.builtin',                            { fg = colors.keywords   })
    hl(0, '@tag.delimiter',                          { fg = colors.vscGray    })
    hl(0, '@tag.attribute',                          { fg = colors.variables  })
    hl(0, '@text',                                   { fg = colors.comments   })
    hl(0, '@markup.strong',                          { fg = colors.keywords   })
    hl(0, '@markup.italic',                          { fg = colors.comments   })
    hl(0, '@markup.underline',                       { fg = colors.functions  })
    hl(0, '@markup.strikethrough',                   { fg = colors.comments   })
    hl(0, '@markup.heading',                         { fg = colors.keywords   })
    hl(0, '@markup.heading.1.markdown',              { fg = colors.keywords   })
    hl(0, '@markup.heading.2.markdown',              { fg = colors.strings    })
    hl(0, '@markup.heading.3.markdown',              { fg = colors.functions  })
    hl(0, '@markup.heading.4.markdown',              { fg = colors.vscGreen   })
    hl(0, '@markup.heading.5.markdown',              { fg = colors.keywords   })
    hl(0, '@markup.heading.6.markdown',              { fg = colors.keywords   })
    hl(0, '@markup.raw',                             { fg = colors.comments   })
    hl(0, '@markup.raw.markdown',                    { fg = colors.strings    })
    hl(0, '@markup.raw.markdown_inline',             { fg = colors.strings    })
    hl(0, '@markup.link.label',                      { fg = colors.variables  })
    hl(0, '@markup.link.url',                        { fg = colors.comments   })
    hl(0, '@markup.list.checked',                    { link = 'Todo' })
    hl(0, '@markup.list.unchecked',                  { link = 'Todo' })
    hl(0, '@textReference',                          { fg = colors.strings    })
    hl(0, '@stringEscape',                           { fg = colors.strings    })
    hl(0, '@diff.plus',                              { link = 'DiffAdd' })   
    hl(0, '@diff.minus',                             { link = 'DiffDelete' })
    hl(0, '@diff.delta',                             { link = 'DiffChange' })

    -- LSP semantic tokens
    hl(0, '@type.builtin',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, '@lsp.typemod.type.defaultLibrary',        { link = '@type.builtin' })
    hl(0, '@lsp.type.type',                          { link = '@type' })
    hl(0, '@lsp.type.typeParameter',                 { link = '@type' })
    hl(0, '@lsp.type.macro',                         { link = '@constant' })
    hl(0, '@lsp.type.enumMember',                    { link = '@constant' })
    hl(0, '@lsp.typemod.variable.readonly',          { link = '@constant' })
    hl(0, '@lsp.typemod.property.readonly',          { link = '@constant' })
    hl(0, '@lsp.typemod.variable.constant',          { link = '@constant' })
    hl(0, '@lsp.type.member',                        { link = '@function' })
    hl(0, '@lsp.type.keyword',                       { link = '@keyword' })
    hl(0, '@lsp.typemod.keyword.controlFlow',        { fg = colors.purple,        bg = colors.grey_900 })  
    hl(0, '@lsp.type.comment.c',                     { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, '@lsp.type.comment.cpp',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, '@event',                                  { link = 'Identifier' })
    hl(0, '@interface',                              { link = 'Identifier' })
    hl(0, '@modifier',                               { link = 'Identifier' })
    hl(0, '@regexp',                                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, '@decorator',                              { link = 'Identifier' })

    -- Markdown
    hl(0, 'markdownBold',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownCode',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownRule',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownCodeDelimiter',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownHeadingDelimiter',                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownFootnote',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownFootnoteDefinition',              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownUrl',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownLinkText',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'markdownEscape',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH1',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH2',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH3',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH4',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH5',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH6',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH1Bg',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH2Bg',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH3Bg',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH4Bg',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH5Bg',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'RenderMarkdownH6Bg',                      { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Asciidoc
    hl(0, 'asciidocAttributeEntry',                  { fg = colors.grey_400,      bg = colors.grey_900 })       
    hl(0, 'asciidocAttributeList',                   { fg = colors.grey_400,      bg = colors.grey_900 })   
    hl(0, 'asciidocAttributeRef',                    { fg = colors.grey_400,      bg = colors.grey_900 })   
    hl(0, 'asciidocHLabel',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'asciidocListingBlock',                    { fg = colors.grey_400,      bg = colors.grey_900 })   
    hl(0, 'asciidocMacroAttributes',                 { fg = colors.grey_400,      bg = colors.grey_900 })       
    hl(0, 'asciidocOneLineTitle',                    { fg = colors.grey_400,      bg = colors.grey_900 })   
    hl(0, 'asciidocPassthroughBlock',                { fg = colors.grey_400,      bg = colors.grey_900 })       
    hl(0, 'asciidocQuotedMonospaced',                { fg = colors.grey_400,      bg = colors.grey_900 })       
    hl(0, 'asciidocTriplePlusPassthrough',           { fg = colors.grey_400,      bg = colors.grey_900 })           
    hl(0, 'asciidocMacro',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'asciidocAdmonition',                      { fg = colors.grey_400,      bg = colors.grey_900 })   
    hl(0, 'asciidocQuotedEmphasized',                { fg = colors.grey_400,      bg = colors.grey_900 })       
    hl(0, 'asciidocQuotedEmphasized2',               { fg = colors.grey_400,      bg = colors.grey_900 })       
    hl(0, 'asciidocQuotedEmphasizedItalic',          { fg = colors.grey_400,      bg = colors.grey_900 })               
    hl(0, 'asciidocBackslash',                       { link = 'Keyword' })
    hl(0, 'asciidocQuotedBold',                      { link = 'markdownBold' })
    hl(0, 'asciidocQuotedMonospaced2',               { link = 'asciidocQuotedMonospaced' })
    hl(0, 'asciidocQuotedUnconstrainedBold',         { link = 'asciidocQuotedBold' })
    hl(0, 'asciidocQuotedUnconstrainedEmphasized',   { link = 'asciidocQuotedEmphasized' })
    hl(0, 'asciidocURL',                             { link = 'markdownUrl' })

    -- JSON
    hl(0, 'jsonKeyword',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'jsonEscape',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'jsonNull',                                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'jsonBoolean',                             { fg = colors.grey_400,      bg = colors.grey_900 })

    -- HTML
    hl(0, 'htmlTag',                                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'htmlEndTag',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'htmlTagName',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'htmlSpecialTagName',                      { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'htmlArg',                                 { fg = colors.grey_400,      bg = colors.grey_900 })

    -- PHP
    hl(0, 'phpStaticClasses',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpMethod',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpClass',                                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpFunction',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpInclude',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpUseClass',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpRegion',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'phpMethodsVar',                           { fg = colors.grey_400,      bg = colors.grey_900 })

    -- CSS
    hl(0, 'cssBraces',                               { fg = colors.brackets,      bg = colors.grey_900 })
    hl(0, 'cssInclude',                              { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'cssTagName',                              { fg = colors.types,         bg = colors.grey_900 })
    hl(0, 'cssClassName',                            { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'cssPseudoClass',                          { fg = colors.enums,         bg = colors.grey_900 })
    hl(0, 'cssPseudoClassId',                        { fg = colors.enums,         bg = colors.grey_900 })
    hl(0, 'cssPseudoClassLang',                      { fg = colors.enums,         bg = colors.grey_900 })
    hl(0, 'cssIdentifier',                           { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'cssProp',                                 { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'cssDefinition',                           { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'cssAttr',                                 { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'cssAttrRegion',                           { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'cssColor',                                { fg = colors.strings,       bg = colors.grey_900 })
    hl(0, 'cssFunction',                             { fg = colors.functions,     bg = colors.grey_900 })
    hl(0, 'cssFunctionName',                         { fg = colors.functions,     bg = colors.grey_900 })
    hl(0, 'cssVendor',                               { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'cssValueNumber',                          { fg = colors.numbers,       bg = colors.grey_900 })
    hl(0, 'cssValueLength',                          { fg = colors.numbers,       bg = colors.grey_900 })
    hl(0, 'cssUnitDecorators',                       { fg = colors.delimiters,    bg = colors.grey_900 })
    hl(0, 'cssStyle',                                { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'cssImportant',                            { fg = colors.keywords,      bg = colors.grey_900 })

    -- JavaScript
    hl(0, 'jsVariableDef',                           { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsFuncArgs',                              { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsFuncBlock',                             { fg = colors.brackets,      bg = colors.grey_900 })
    hl(0, 'jsRegexpString',                          { fg = colors.strings,       bg = colors.grey_900 })
    hl(0, 'jsThis',                                  { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsOperatorKeyword',                       { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'jsDestructuringBlock',                    { fg = colors.brackets,      bg = colors.grey_900 })
    hl(0, 'jsObjectKey',                             { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsGlobalObjects',                         { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsModuleKeyword',                         { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'jsClassDefinition',                       { fg = colors.types,         bg = colors.grey_900 })
    hl(0, 'jsClassKeyword',                          { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'jsExtendsKeyword',                        { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'jsExportDefault',                         { fg = colors.keywords,      bg = colors.grey_900 })
    hl(0, 'jsFuncCall',                              { fg = colors.functions,     bg = colors.grey_900 })
    hl(0, 'jsObjectValue',                           { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsParen',                                 { fg = colors.brackets,      bg = colors.grey_900 })
    hl(0, 'jsObjectProp',                            { fg = colors.variables,     bg = colors.grey_900 })
    hl(0, 'jsIfElseBlock',                           { fg = colors.brackets,      bg = colors.grey_900 })
    hl(0, 'jsParenIfElse',                           { fg = colors.brackets,      bg = colors.grey_900 })
    hl(0, 'jsSpreadOperator',                        { fg = colors.delimiters,    bg = colors.grey_900 })
    hl(0, 'jsSpreadExpression',                      { fg = colors.delimiters,    bg = colors.grey_900 }) 

    -- Typescript
    hl(0, '@type.builtin.typescript',                { link = '@type' })
    hl(0, '@type.builtin.tsx',                       { link = '@type' })
    hl(0, 'typescriptLabel',                         { fg = colors.types })
    hl(0, 'typescriptExceptions',                    { fg = colors.errors })
    hl(0, 'typescriptBraces',                        { fg = colors.brackets })
    hl(0, 'typescriptEndColons',                     { fg = colors.delimiters })
    hl(0, 'typescriptParens',                        { fg = colors.brackets })
    hl(0, 'typescriptDocTags',                       { fg = colors.comments })
    hl(0, 'typescriptDocComment',                    { fg = colors.comments })
    hl(0, 'typescriptLogicSymbols',                  { fg = colors.keywords })
    hl(0, 'typescriptImport',                        { fg = colors.keywords })
    hl(0, 'typescriptBOM',                           { fg = colors.delimiters })
    hl(0, 'typescriptVariableDeclaration',           { fg = colors.keywords })
    hl(0, 'typescriptVariable',                      { fg = colors.variables })
    hl(0, 'typescriptExport',                        { fg = colors.keywords })
    hl(0, 'typescriptAliasDeclaration',              { fg = colors.types })
    hl(0, 'typescriptAliasKeyword',                  { fg = colors.keywords })
    hl(0, 'typescriptClassName',                     { fg = colors.types })
    hl(0, 'typescriptAccessibilityModifier',         { fg = colors.keywords })
    hl(0, 'typescriptOperator',                      { fg = colors.delimiters })
    hl(0, 'typescriptArrowFunc',                     { fg = colors.delimiters })
    hl(0, 'typescriptMethodAccessor',                { fg = colors.functions })
    hl(0, 'typescriptMember',                        { fg = colors.variables })
    hl(0, 'typescriptTypeReference',                 { fg = colors.types })
    hl(0, 'typescriptTemplateSB',                    { fg = colors.strings })
    hl(0, 'typescriptArrowFuncArg',                  { fg = colors.variables })
    hl(0, 'typescriptParamImpl',                     { fg = colors.variables })
    hl(0, 'typescriptFuncComma',                     { fg = colors.delimiters })
    hl(0, 'typescriptCastKeyword',                   { fg = colors.keywords })
    hl(0, 'typescriptCall',                          { fg = colors.functions })
    hl(0, 'typescriptCase',                          { fg = colors.keywords })
    hl(0, 'typescriptReserved',                      { fg = colors.keywords })
    hl(0, 'typescriptDefault',                       { fg = colors.keywords })
    hl(0, 'typescriptDecorator',                     { fg = colors.types })
    hl(0, 'typescriptPredefinedType',                { fg = colors.types })
    hl(0, 'typescriptClassHeritage',                 { fg = colors.types })
    hl(0, 'typescriptClassExtends',                  { fg = colors.types })
    hl(0, 'typescriptClassKeyword',                  { fg = colors.keywords })
    hl(0, 'typescriptBlock',                         { fg = colors.brackets })
    hl(0, 'typescriptDOMDocProp',                    { fg = colors.variables })
    hl(0, 'typescriptTemplateSubstitution',          { fg = colors.strings })
    hl(0, 'typescriptClassBlock',                    { fg = colors.brackets })
    hl(0, 'typescriptFuncCallArg',                   { fg = colors.variables })
    hl(0, 'typescriptIndexExpr',                     { fg = colors.variables })
    hl(0, 'typescriptConditionalParen',              { fg = colors.brackets })
    hl(0, 'typescriptArray',                         { fg = colors.types })
    hl(0, 'typescriptES6SetProp',                    { fg = colors.variables })
    hl(0, 'typescriptObjectLiteral',                 { fg = colors.variables })
    hl(0, 'typescriptTypeParameter',                 { fg = colors.types })
    hl(0, 'typescriptEnumKeyword',                   { fg = colors.enums })
    hl(0, 'typescriptEnum',                          { fg = colors.enums })
    hl(0, 'typescriptLoopParen',                     { fg = colors.brackets })
    hl(0, 'typescriptParenExp',                      { fg = colors.brackets })
    hl(0, 'typescriptModule',                        { fg = colors.types })
    hl(0, 'typescriptAmbientDeclaration',            { fg = colors.types })
    hl(0, 'typescriptFuncTypeArrow',                 { fg = colors.delimiters })
    hl(0, 'typescriptInterfaceHeritage',             { fg = colors.types })
    hl(0, 'typescriptInterfaceName',                 { fg = colors.types })
    hl(0, 'typescriptInterfaceKeyword',              { fg = colors.keywords })
    hl(0, 'typescriptInterfaceExtends',              { fg = colors.types })
    hl(0, 'typescriptGlobal',                        { fg = colors.variables })
    hl(0, 'typescriptAsyncFuncKeyword',              { fg = colors.keywords })
    hl(0, 'typescriptFuncKeyword',                   { fg = colors.keywords })
    hl(0, 'typescriptGlobalMethod',                  { fg = colors.functions })
    hl(0, 'typescriptPromiseMethod',                 { fg = colors.functions })     

    -- XML
    hl(0, 'xmlTag',                                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'xmlTagName',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'xmlEndTag',                               { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Ruby
    hl(0, 'rubyClassNameTag',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'rubyClassName',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'rubyModuleName',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'rubyConstant',                            { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Golang
    hl(0, 'goPackage',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goImport',                                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goVar',                                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goConst',                                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goStatement',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goType',                                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goSignedInts',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goUnsignedInts',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goFloats',                                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goComplexes',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goBuiltins',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goBoolean',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goPredefinedIdentifiers',                 { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'goTodo',                                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goDeclaration',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goDeclType',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goTypeDecl',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goTypeName',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goVarAssign',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goVarDefs',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goReceiver',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goReceiverType',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goFunctionCall',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goMethodCall',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'goSingleDecl',                            { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Python
    hl(0, 'pythonStatement',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonOperator',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonException',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonExClass',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonBuiltinObj',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonBuiltinType',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonBoolean',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonNone',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonTodo',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonClassVar',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'pythonClassDef',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, '@constructor.python',                     { fg = colors.grey_400,      bg = colors.grey_900 }) 

    -- TeX
    hl(0, 'texStatement',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'texBeginEnd',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'texBeginEndName',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'texOption',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'texBeginEndModifier',                     { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'texDocType',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'texDocTypeArgs',                          { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Git
    hl(0, 'gitcommitHeader',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'gitcommitOnBranch',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'gitcommitBranch',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'gitcommitComment',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'gitcommitSelectedType',                   { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'gitcommitSelectedFile',                   { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'gitcommitDiscardedType',                  { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'gitcommitDiscardedFile',                  { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'gitcommitOverflow',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'gitcommitSummary',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'gitcommitBlank',                          { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Lua
    hl(0, 'luaFuncCall',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'luaFuncArgName',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'luaFuncKeyword',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'luaLocal',                                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'luaBuiltIn',                              { fg = colors.grey_400,      bg = colors.grey_900 })

    -- SH
    hl(0, 'shDeref',                                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'shVariable',                              { fg = colors.grey_400,      bg = colors.grey_900 })

    -- SQL
    hl(0, 'sqlKeyword',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'sqlFunction',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'sqlOperator',                             { fg = colors.grey_400,      bg = colors.grey_900 })

    -- YAML
    hl(0, 'yamlKey',                                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'yamlConstant',                            { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Gitgutter
    hl(0, 'GitGutterAdd',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitGutterChange',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitGutterDelete',                         { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Git Signs
    hl(0, 'GitSignsAdd',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitSignsChange',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitSignsDelete',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitSignsAddLn',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitSignsChangeLn',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'GitSignsDeleteLn',                        { fg = colors.grey_400,      bg = colors.grey_900 })

    -- NvimTree
    hl(0, 'NvimTreeRootFolder',                      { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeGitDirty',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeGitNew',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeImageFile',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeEmptyFolderName',                 { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'NvimTreeFolderName',                      { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeSpecialFile',                     { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeNormal',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeCursorLine',                      { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeVertSplit',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeEndOfBuffer',                     { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeOpenedFolderName',                { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'NvimTreeGitRenamed',                      { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeGitIgnored',                      { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeGitDeleted',                      { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'NvimTreeGitStaged',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeGitMerge',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeGitDirty',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeGitNew',                          { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Bufferline
    hl(0, 'BufferLineIndicatorSelected',             { fg = colors.grey_400,      bg = colors.grey_900 })          
    hl(0, 'BufferLineFill',                          { fg = colors.grey_400,      bg = colors.grey_900 })

    -- BarBar
    hl(0, 'BufferCurrent',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferCurrentIndex',                      { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferCurrentMod',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferCurrentSign',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferCurrentTarget',                     { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferVisible',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferVisibleIndex',                      { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferVisibleMod',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferVisibleSign',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferVisibleTarget',                     { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferInactive',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferInactiveIndex',                     { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferInactiveMod',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferInactiveSign',                      { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferInactiveTarget',                    { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'BufferTabpage',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferTabpageFill',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferTabpages',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BufferTabpagesFill',                      { fg = colors.grey_400,      bg = colors.grey_900 })  

    -- IndentBlankLine
    hl(0, 'IblIndent',                               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'IblWhitespace',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'IblScope',                                { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Snacks.indent
    hl(0, 'SnacksIndent',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'SnacksIndentScope',                       { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Neotest
    hl(0, 'NeotestAdapterName',                      { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'NeotestDir',                              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestExpandMarker',                     { fg = colors.grey_400,      bg = colors.grey_900 })  
    hl(0, 'NeotestFailed',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestFile',                             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestFocused',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestIndent',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestMarked',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestNamespace',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestPassed',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestRunning',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestSkipped',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestTarget',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestWatching',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeotestWinSelect',                        { fg = colors.grey_400,      bg = colors.grey_900 })

    -- LSP
    hl(0, 'DiagnosticOk',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'DiagnosticError',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'DiagnosticWarn',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'DiagnosticInfo',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'DiagnosticHint',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'DiagnosticUnnecessary',                   { fg = colors.grey_400,      bg = colors.grey_900 }) 
    hl(0, 'DiagnosticUnderlineError',                { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'DiagnosticUnderlineWarn',                 { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'DiagnosticUnderlineInfo',                 { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'DiagnosticUnderlineHint',                 { fg = colors.grey_400,      bg = colors.grey_900 })     
    hl(0, 'LspReferenceText',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspReferenceRead',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspReferenceWrite',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspInlayHint',                            { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Trouble
    hl(0, 'TroubleNormal',                           { link = 'Normal' })
    hl(0, 'TroubleNormalNC',                         { link = 'Normal' })

    -- COC.nvim
    hl(0, 'CocHighlightText',                        { fg = colors.grey_400,      bg = colors.grey_900 })                   
    hl(0, 'CocHighlightRead',                        { fg = colors.grey_400,      bg = colors.grey_900 })                   
    hl(0, 'CocHighlightWrite',                       { fg = colors.grey_400,      bg = colors.grey_900 })                   

    -- Nvim compe
    hl(0, 'CmpItemKindVariable',                     { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'CmpItemKindInterface',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'CmpItemKindText',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'CmpItemKindFunction',                     { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'CmpItemKindMethod',                       { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'CmpItemKindKeyword',                      { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'CmpItemKindProperty',                     { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'CmpItemKindUnit',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'CmpItemKindConstructor',                  { fg = colors.grey_400,      bg = colors.grey_900 })                             
    hl(0, 'CmpItemMenu',                             { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'CmpItemAbbr',                             { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'CmpItemAbbrDeprecated',                   { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'CmpItemAbbrMatch',                        { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'CmpItemAbbrMatchFuzzy',                   { fg = colors.grey_400,      bg = colors.grey_900 })                         

    -- Blink
    hl(0, 'BlinkCmpMenu',                            { link = 'Pmenu' })
    hl(0, 'BlinkCmpMenuBorder',                      { link = 'FloatBorder' })
    hl(0, 'BlinkCmpMenuSelection',                   { link = 'PmenuSel' })
    hl(0, 'BlinkCmpScrollBarThumb',                  { link = 'PmenuThumb' })
    hl(0, 'BlinkCmpScrollBarGutter',                 { link = 'PmenuSbar' })
    hl(0, 'BlinkCmpLabel',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BlinkCmpLabelMatch',                      { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'BlinkCmpLabelDetail',                     { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'BlinkCmpLabelDescription',                { fg = colors.grey_400,      bg = colors.grey_900 })                             
    hl(0, 'BlinkCmpKind',                            { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'BlinkCmpSource',                          { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'BlinkCmpGhostText',                       { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'BlinkCmpDoc',                             { link = 'NormalFloat' })
    hl(0, 'BlinkCmpDocBorder',                       { link = 'FloatBorder' })
    hl(0, 'BlinkCmpDocSeparator',                    { link = 'NormalFloat' })
    hl(0, 'BlinkCmpDocCursorLine',                   { link = 'Visual' })
    hl(0, 'BlinkCmpSignatureHelp',                   { link = 'NormalFloat' })
    hl(0, 'BlinkCmpSignatureHelpBorder',             { link = 'NormalFloat' })
    hl(0, 'BlinkCmpSignatureHelpActiveParameter',    { link = 'LspSignatureActiveParameter' })

    hl(0, 'BlinkCmpKindText',                        { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'BlinkCmpKindMethod',                      { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'BlinkCmpKindFunction',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'BlinkCmpKindConstructor',                 { fg = colors.grey_400,      bg = colors.grey_900 })                             
    hl(0, 'BlinkCmpKindField',                       { link = '@variable.member' })
    hl(0, 'BlinkCmpKindVariable',                    { link = '@variable.member' })
    hl(0, 'BlinkCmpKindClass',                       { link = 'BlinkCmpKindConstructor' })
    hl(0, 'BlinkCmpKindInterface',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BlinkCmpKindModule',                      { link = 'BlinkCmpKindClass' })
    hl(0, 'BlinkCmpKindProperty',                    { link = 'BlinkCmpKindField' })
    hl(0, 'BlinkCmpKindUnit',                        { link = 'BlinkCmpKindField' })
    hl(0, 'BlinkCmpKindValue',                       { link = '@variable.member' })
    hl(0, 'BlinkCmpKindEnum',                        { link = 'BlinkCmpKindConstructor' })
    hl(0, 'BlinkCmpKindKeyword',                     { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BlinkCmpKindSnippet',                     { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BlinkCmpKindColor',                       { link = 'cssColor' })
    hl(0, 'BlinkCmpKindFile',                        { link = '@text.uri' })
    hl(0, 'BlinkCmpKindReference',                   { link = '@variable.parameter.reference' })
    hl(0, 'BlinkCmpKindFolder',                      { link = 'NeotestDir' })
    hl(0, 'BlinkCmpKindEnumMember',                  { link = '@variable.member' })
    hl(0, 'BlinkCmpKindConstant',                    { link = '@constant' })
    hl(0, 'BlinkCmpKindStruct',                      { link = '@structure' })
    hl(0, 'BlinkCmpKindEvent',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'BlinkCmpKindOperator',                    { link = '@operator' })
    hl(0, 'BlinkCmpKindTypeParameter',               { link = '@variable.parameter' })
    hl(0, 'BlinkCmpKindCopilot',                     { fg = colors.grey_400,      bg = colors.grey_900 })                         

    -- HiPhish/rainbow-delimiters.nvim
    hl(0, 'RainbowDelimiterRed',                     { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'RainbowDelimiterOrange',                  { fg = colors.grey_400,      bg = colors.grey_900 })                             
    hl(0, 'RainbowDelimiterYellow',                  { fg = colors.grey_400,      bg = colors.grey_900 })                             
    hl(0, 'RainbowDelimiterGreen',                   { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'RainbowDelimiterCyan',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'RainbowDelimiterBlue',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'RainbowDelimiterViolet',                  { fg = colors.grey_400,      bg = colors.grey_900 })                             

    -- rcarriga/nvim-dap-ui 
    hl(0, 'DapUIBreakpointsCurrentLine',             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'DapUIBreakpointsDisabledLine',            { fg = colors.grey_400,      bg = colors.grey_900 })                                
    hl(0, 'DapUIBreakpointsInfo',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUIBreakpointsLine',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUIBreakpointsPath',                    { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUICurrentFrameName',                   { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUIDecoration',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIFloatBorder',                        { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUILineNumber',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIModifiedValue',                      { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUIPlayPause',                          { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIPlayPauseNC',                        { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIRestart',                            { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIRestartNC',                          { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIScope',                              { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUISource',                             { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIStepBack',                           { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIStepBackNC',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIStepInto',                           { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIStepIntoNC',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIStepOut',                            { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIStepOutNC',                          { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIStepOver',                           { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIStepOverNC',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIStop',                               { fg = colors.grey_400,      bg = colors.grey_900 })             
    hl(0, 'DapUIStopNC',                             { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIStoppedThread',                      { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUIThread',                             { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DapUIType',                               { fg = colors.grey_400,      bg = colors.grey_900 })             
    hl(0, 'DapUIUnavailable',                        { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIUnavailableNC',                      { fg = colors.grey_400,      bg = colors.grey_900 })                         
    hl(0, 'DapUIWatchesEmpty',                       { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIWatchesError',                       { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIWatchesValue',                       { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DapUIWinSelect',                          { fg = colors.grey_400,      bg = colors.grey_900 })                     

    -- Dashboard
    hl(0, 'DashboardHeader',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DashboardDesc',                           { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DashboardIcon',                           { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DashboardShortCut',                       { fg = colors.grey_400,      bg = colors.grey_900 })                     
    hl(0, 'DashboardKey',                            { fg = colors.grey_400,      bg = colors.grey_900 })                 
    hl(0, 'DashboardFooter',                         { fg = colors.grey_400,      bg = colors.grey_900 })                     

    -- Illuminate
    hl(0, 'illuminatedWord',                         { fg = colors.grey_400,      bg = colors.grey_900 })                             
    hl(0, 'illuminatedCurWord',                      { fg = colors.grey_400,      bg = colors.grey_900 })                                
    hl(0, 'IlluminatedWordText',                     { fg = colors.grey_400,      bg = colors.grey_900 })                                  
    hl(0, 'IlluminatedWordRead',                     { fg = colors.grey_400,      bg = colors.grey_900 })                                 
    hl(0, 'IlluminatedWordWrite',                    { fg = colors.grey_400,      bg = colors.grey_900 })                                  

    -- mini.statusline
    hl(0, 'MiniStatuslineModeNormal',                { fg = colors.grey_400,      bg = colors.grey_900 })                                      
    hl(0, 'MiniStatuslineModeInsert',                { fg = colors.grey_400,      bg = colors.grey_900 })                                      
    hl(0, 'MiniStatuslineModeVisual',                { fg = colors.grey_400,      bg = colors.grey_900 })                                      
    hl(0, 'MiniStatuslineModeReplace',               { fg = colors.grey_400,      bg = colors.grey_900 })                                       
    hl(0, 'MiniStatuslineModeCommand',               { fg = colors.grey_400,      bg = colors.grey_900 })                                       
    hl(0, 'MiniStatuslineModeOther',                 { fg = colors.grey_400,      bg = colors.grey_900 })                                     
    hl(0, 'MiniStatuslineDevinfo',                   { fg = colors.grey_400,      bg = colors.grey_900 })                                   
    hl(0, 'MiniStatuslineFilename',                  { fg = colors.grey_400,      bg = colors.grey_900 })                                    
    hl(0, 'MiniStatuslineFileinfo',                  { fg = colors.grey_400,      bg = colors.grey_900 })                                    
    hl(0, 'MiniStatuslineInactive',                  { fg = colors.grey_400,      bg = colors.grey_900 })                                    

    -- mini.icons
    hl(0, 'MiniIconsAzure',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsBlue',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsCyan',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsGreen',                          { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsGrey',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsOrange',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsPurple',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsRed',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniIconsYellow',                         { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Neotree
    hl(0, 'NeoTreeRootName',                         { fg = colors.grey_400,      italic=false})
    hl(0, 'NeoTreeTabActive',                        { fg = colors.grey_400,      bg = colors.grey_850 })
    hl(0, 'NeoTreeTabInactive',                      { fg = colors.grey_600,      bg = colors.grey_900 })
    hl(0, 'NeoTreeTabSeparatorActive',               { fg = colors.grey_850,      bg = colors.grey_850 })
    hl(0, 'NeoTreeTabSeparatorInactive',             { fg = colors.grey_900,      bg = colors.grey_900 })
    hl(0, 'NeoTreeBufferNumber',                     { fg = colors.grey_400 })
    hl(0, 'NeoTreeCursorLine',                       { bg = colors.grey_800 })
    hl(0, 'NeoTreeDimText',                          { fg = colors.grey_600 })
    hl(0, 'NeoTreeDirectoryIcon',                    { fg = colors.green })
    hl(0, 'NeoTreeDirectoryName',                    { fg = colors.grey_400 })
    hl(0, 'NeoTreeDotfile',                          { fg = colors.grey_400 })
    hl(0, 'NeoTreeFileIcon',                         { fg = colors.grey_400 })
    hl(0, 'NeoTreeFileName',                         { fg = colors.grey_400 })
    hl(0, 'NeoTreeFileNameOpened',                   { fg = colors.grey_400 })
    hl(0, 'NeoTreeFilterTerm',                       { fg = colors.grey_400 })
    hl(0, 'NeoTreeFloatBorder',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeFloatTitle',                       { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeTitleBar',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitAdded',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitConflict',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitDeleted',                       { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitIgnored',                       { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitModified',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitUnstaged',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitUntracked',                     { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeGitStaged',                        { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeHiddenByName',                     { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeIgnored',                          { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeIndentMarker',                     { fg = colors.grey_700 })
    hl(0, 'NeoTreeExpander',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeNormal',                           { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeNormalNC',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeSignColumn',                       { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeStats',                            { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeStatsHeader',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeStatusLine',                       { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeStatusLineNC',                     { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeVertSplit',                        { fg = colors.grey_400 })
    hl(0, 'NeoTreeWinSeparator',                     { fg = colors.grey_875,      bg = colors.grey_875 })
    hl(0, 'NeoTreeEndOfBuffer',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeSymbolicLinkTarget',               { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeTitleBar',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    hl(0, 'NeoTreeWindowsHidden',                    { fg = colors.grey_400,      bg = colors.grey_875 })

    -- Noice
    -- hl(0, 'NoiceCmdline',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIcon',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconCalculator',              { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconCmdline',                 { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconFilter',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconHelp',                    { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconIncRename',               { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconInput',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconLua',                     { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlineIconSearch',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopup',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorder',                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NoiceCmdlinePopupBorderCalculator',       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NoiceCmdlinePopupBorderCmdline',          { fg = colors.grey_600,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorderFilter',           { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorderHelp',             { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorderIncRename',        { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorderInput',            { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorderLua',              { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupBorderSearch',           { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePopupTitle',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCmdlinePrompt',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    -- hl(0, 'NoiceCompletionItemKindClass',            { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindColor',            { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindConstant',         { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindConstructor',      { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindDefault',          { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindEnum',             { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindEnumMember',       { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindField',            { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindFile',             { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindFolder',           { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindFunction',         { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindInterface',        { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindKeyword',          { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindMethod',           { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindModule',           { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindProperty',         { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindSnippet',          { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindStruct',           { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindText',             { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindUnit',             { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindValue',            { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemKindVariable',         { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemMenu',                 { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCompletionItemWord',                 { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceConfirm',                            { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceConfirmBorder',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceCursor',                             { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatConfirm',                      { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatConfirmDefault',               { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatDate',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatEvent',                        { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatKind',                         { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatLevelDebug',                   { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatLevelError',                   { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatLevelInfo',                    { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatLevelOff',                     { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatLevelTrace',                   { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatLevelWarn',                    { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatProgressDone',                 { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatProgressTodo',                 { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceFormatTitle',                        { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceLspProgressClient',                  { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceLspProgressSpinner',                 { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceLspProgressTitle',                   { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceMini',                               { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoicePopup',                              { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoicePopupBorder',                        { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoicePopupmenu',                          { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoicePopupmenuBorder',                    { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoicePopupmenuMatch',                     { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoicePopupmenuSelected',                  { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceScrollbar',                          { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceScrollbarThumb',                     { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceSplit',                              { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceSplitBorder',                        { fg = colors.grey_400,      bg = colors.grey_875 })
    -- hl(0, 'NoiceVirtualText',                        { fg = colors.grey_400,      bg = colors.grey_875 })

    -- Snacks nvim
    hl(0, 'SnacksPicker',                            { link = 'Normal' })
    hl(0, 'SnacksPickerBorder',                      { link = 'Normal' })
    hl(0, 'SnacksPickerDir',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'SnacksPickerDirectory',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'SnacksIndent',                            { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'SnacksPickerListCursorLine',              { link = 'PmenuSel' })
    hl(0, 'SnacksPickerPreviewCursorLine',           { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Compiler mode nvim
    hl(0, 'CompileModeMessage',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeMessageRow',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeMessageCol',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeError',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeWarning',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeInfo',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeCommandOutput',                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeDirectoryMessage',             { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeOutputFile',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeCheckResult',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeCheckTarget',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'CompileModeErrorLocus',                   { link = 'Visual' })

    -- Mini Statusline
    hl(0, 'MiniStatuslineDevinfo',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniStatuslineFileinfo',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniStatuslineModeCommand',               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniStatuslineModeInsert',                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniStatuslineModeNormal',                { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniStatuslineModeReplace',               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'MiniStatuslineModeVisual',                { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Copilot
    hl(0, 'CopilotSuggestion',                       { fg = colors.grey_400,      bg = colors.grey_900 })

    -- NeogitOrg/neogit
    hl(0, 'NeogitWinSeparator',                      { link = 'WinSeparator' })
    hl(0, 'NeogitDiffAdd',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffAddHighlight',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffContext',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffContextHighlight',              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffDelete',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffDeleteHighlight',               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffHeader',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffHeaderHighlight',               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitHunkHeader',                        { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitHunkHeaderHighlight',               { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NeogitDiffAddCursor',                     { link = 'NeogitDiffAddHighlight' })
    hl(0, 'NeogitDiffContextCursor',                 { link = 'NeogitDiffContextHighlight' })
    hl(0, 'NeogitDiffDeleteCursor',                  { link = 'NeogitDiffDeleteHighlight' })
    hl(0, 'NeogitHunkHeaderCursor',                  { link = 'NeogitHunkHeaderHighlight' })

    -- Which key
    hl(0, 'WhichKey',							     { fg = colors.grey_400,      bg = colors.grey_800 })
	hl(0, 'WhichKeyBorder',						     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyDesc',						     { fg = colors.grey_400,      bg = colors.grey_800 })
	hl(0, 'WhichKeyGroup',						     { fg = colors.grey_400,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIcon',						     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconAzure',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconBlue',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconCyan',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconGreen',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconGrey',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconOrange',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconPurple',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconRed',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyIconYellow',					     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyNormal',						     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeySeparator',					     { fg = colors.grey_400,      bg = colors.grey_800 })
	hl(0, 'WhichKeyTitle',						     { fg = colors.grey_800,      bg = colors.grey_800 })
	hl(0, 'WhichKeyValue',						     { fg = colors.grey_400,      bg = colors.grey_800 })
    
    -- Nvim
    hl(0, 'NvimTreeFolderIcon',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'NvimTreeIndentMarker',                    { fg = colors.grey_400,      bg = colors.grey_900 })

    -- Lsp
    hl(0, 'LspFloatWinNormal',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspFloatWinBorder',                       { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspInfoBorder',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaHoverBorder',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaSignatureHelpBorder',              { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaCodeActionBorder',                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaDefPreviewBorder',                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspLinesDiagBorder',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaRenameBorder',                     { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaBorderTitle',                      { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LSPSagaDiagnosticTruncateLine',           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaDiagnosticBorder',                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaDiagnosticBorder',                 { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaShTruncateLine',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaShTruncateLine',                   { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaDocTruncateLine',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaRenameBorder',                     { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'LspSagaLspFinderBorder',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    
    -- Telescope
    hl(0, 'TelescopeSelection',                      { fg = colors.grey_400,      bg = colors.grey_850 })
    hl(0, 'TelescopeSelectionCaret',                 { fg = colors.grey_400,      bg = colors.grey_850 })
    hl(0, 'TelescopeMultiSelection',                 { fg = colors.grey_400,      bg = colors.grey_800 })
    hl(0, 'TelescopeMultiIcon',                      { fg = colors.grey_400,      bg = colors.grey_800 })
    hl(0, 'TelescopeNormal',                         { fg = colors.grey_400,      bg = colors.grey_800 })
    hl(0, 'TelescopePreviewNormal',                  { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'TelescopePromptNormal',                   { fg = colors.grey_400,      bg = colors.grey_850 })
    hl(0, 'TelescopeResultsNormal',                  { fg = colors.grey_400,      bg = colors.grey_800 })
    hl(0, 'TelescopeBorder',                         { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'TelescopePromptBorder',                   { fg = colors.grey_850,      bg = colors.grey_850 })
    hl(0, 'TelescopeResultsBorder',                  { fg = colors.grey_800,      bg = colors.grey_800 })
    hl(0, 'TelescopePreviewBorder',                  { fg = colors.grey_900,      bg = colors.grey_900 })
    hl(0, 'TelescopeTitle',                          { default = true, link = "TelescopeBorder" })
    hl(0, 'TelescopePromptTitle',                    { fg = colors.grey_850,      bg = colors.grey_850 })
    hl(0, 'TelescopeResultsTitle',                   { fg = colors.grey_800,      bg = colors.grey_800 })
    hl(0, 'TelescopePreviewTitle',                   { fg = colors.grey_900,      bg = colors.grey_900 })
    hl(0, 'TelescopePromptCounter',                  { fg = colors.grey_400,      bg = colors.grey_850 })
    hl(0, 'TelescopeMatching',                       { fg = colors.grey_400,      bg = colors.grey_800 })
    hl(0, 'TelescopePromptPrefix',                   { fg = colors.grey_400,      bg = colors.grey_850 })
    hl(0, 'TelescopePreviewLine',                    { default = true, link = "Visual" })
    hl(0, 'TelescopePreviewMatch',                   { fg = colors.grey_800,      bg = colors.grey_900 })
    hl(0, 'TelescopePreviewPipe',                    { default = true, link = "Constant" })
    hl(0, 'TelescopePreviewCharDev',                 { default = true, link = "Constant" })
    hl(0, 'TelescopePreviewDirectory',               { default = true, link = "Directory" })
    hl(0, 'TelescopePreviewBlock',                   { default = true, link = "Constant" })
    hl(0, 'TelescopePreviewLink',                    { default = true, link = "Special" })
    hl(0, 'TelescopePreviewSocket',                  { default = true, link = "Statement" })
    hl(0, 'TelescopePreviewRead',                    { default = true, link = "Constant" })
    hl(0, 'TelescopePreviewWrite',                   { default = true, link = "Statement" })
    hl(0, 'TelescopePreviewExecute',                 { default = true, link = "String" })
    hl(0, 'TelescopePreviewHyphen',                  { default = true, link = "NonText" })
    hl(0, 'TelescopePreviewSticky',                  { default = true, link = "Keyword" })
    hl(0, 'TelescopePreviewSize',                    { default = true, link = "String" })
    hl(0, 'TelescopePreviewUser',                    { default = true, link = "Constant" })
    hl(0, 'TelescopePreviewGroup',                   { default = true, link = "Constant" })
    hl(0, 'TelescopePreviewDate',                    { default = true, link = "Directory" })
    hl(0, 'TelescopePreviewMessage',                 { default = true, link = "TelescopePreviewNormal" })
    hl(0, 'TelescopePreviewMessageFillchar',         { default = true, link = "TelescopePreviewMessage" })
    hl(0, 'TelescopeResultsClass',                   { default = true, link = "Function" })
    hl(0, 'TelescopeResultsConstant',                { default = true, link = "Constant" })
    hl(0, 'TelescopeResultsField',                   { default = true, link = "Function" })
    hl(0, 'TelescopeResultsFunction',                { default = true, link = "Function" })
    hl(0, 'TelescopeResultsMethod',                  { default = true, link = "Method" })
    hl(0, 'TelescopeResultsOperator',                { default = true, link = "Operator" })
    hl(0, 'TelescopeResultsStruct',                  { default = true, link = "Struct" })
    hl(0, 'TelescopeResultsVariable',                { default = true, link = "SpecialChar" })
    hl(0, 'TelescopeResultsLineNr',                  { default = true, link = "LineNr" })
    hl(0, 'TelescopeResultsIdentifier',              { default = true, link = "Identifier" })
    hl(0, 'TelescopeResultsNumber',                  { default = true, link = "Number" })
    hl(0, 'TelescopeResultsComment',                 { default = true, link = "Comment" })
    hl(0, 'TelescopeResultsSpecialComment',          { default = true, link = "SpecialComment" })
    hl(0, 'TelescopeResultsDiffChange',              { default = true, link = "DiffChange" })
    hl(0, 'TelescopeResultsDiffAdd',                 { default = true, link = "DiffAdd" })
    hl(0, 'TelescopeResultsDiffDelete',              { default = true, link = "DiffDelete" })
    hl(0, 'TelescopeResultsDiffUntracked',           { default = true, link = "NonText" })

    -- Debugging
    hl(0, 'debugPC',                                 { fg = colors.grey_400,      bg = colors.grey_900 })

    -- symbols-outline
    hl(0, 'FocusedSymbol',                           { fg = colors.grey_400,      bg = colors.grey_900 })
    hl(0, 'SymbolsOutlineConnector',                 { fg = colors.grey_400,      bg = colors.grey_900 })
end

theme.link_highlight = function()

    -- Legacy groups for official git.vim and diff.vim syntax
    hl(0, 'diffAdded',                               { link = 'DiffAdd' })
    hl(0, 'diffChanged',                             { link = 'DiffChange' })
    hl(0, 'diffRemoved',                             { link = 'DiffDelete' })

    -- Legacy groups for treesitter
    hl(0, '@parameter',                              { link = '@variable.parameter' })
    hl(0, '@field',                                  { link = '@variable.member' })
    hl(0, '@string.regex',                           { link = '@string.regexp' })
    hl(0, '@float',                                  { link = '@number.float' })
    hl(0, '@namespace',                              { link = '@module' })
    hl(0, '@method',                                 { link = '@function.method' })
    hl(0, '@field',                                  { link = '@variable.member' })
    hl(0, '@conditional',                            { link = '@keyword.conditional' })
    hl(0, '@repeat',                                 { link = '@keyword.repeat' })
    hl(0, '@exception',                              { link = '@keyword.exception' })
    hl(0, '@storageclass',                           { link = '@keyword.storage' })
    hl(0, '@include',                                { link = '@keyword.import' })
    hl(0, '@text.strong',                            { link = '@markup.strong' })
    hl(0, '@text.underline',                         { link = '@markup.underline' })
    hl(0, '@text.emphasis',                          { link = '@markup.italic' })
    hl(0, '@text.strike',                            { link = '@markup.strikethrough' })
    hl(0, '@text.title',                             { link = '@markup.heading' })
    hl(0, '@text.uri',                               { link = '@markup.link.url' })
    hl(0, '@text.literal',                           { link = '@markup.raw' })
    hl(0, '@text.note',                              { link = '@comment.note' })
    hl(0, '@text.warning',                           { link = '@comment.warning' })
    hl(0, '@text.danger',                            { link = '@comment.error' })
    hl(0, '@text.diff.add',                          { link = '@diff.plus' })
    hl(0, '@text.diff.delete',                       { link = '@diff.minus' })

    -- Nvim compe
    hl(0, 'CompeDocumentation',                      { link = 'Pmenu' })
    hl(0, 'CompeDocumentationBorder',                { link = 'Pmenu' })
    hl(0, 'CmpItemKind',                             { link = 'Pmenu' })
    hl(0, 'CmpItemKindClass',                        { link = 'CmpItemKindConstructor' })
    hl(0, 'CmpItemKindModule',                       { link = 'CmpItemKindKeyword' })
    hl(0, 'CmpItemKindOperator',                     { link = '@operator' })
    hl(0, 'CmpItemKindReference',                    { link = '@variable.parameter.reference' })
    hl(0, 'CmpItemKindValue',                        { link = '@variable.member' })
    hl(0, 'CmpItemKindField',                        { link = '@variable.member' })
    hl(0, 'CmpItemKindEnum',                         { link = '@variable.member' })
    hl(0, 'CmpItemKindSnippet',                      { link = '@text' })
    hl(0, 'CmpItemKindColor',                        { link = 'cssColor' })
    hl(0, 'CmpItemKindFile',                         { link = '@text.uri' })
    hl(0, 'CmpItemKindFolder',                       { link = '@text.uri' })
    hl(0, 'CmpItemKindEvent',                        { link = '@constant' })
    hl(0, 'CmpItemKindEnumMember',                   { link = '@variable.member' })
    hl(0, 'CmpItemKindConstant',                     { link = '@constant' })
    hl(0, 'CmpItemKindStruct',                       { link = '@structure' })
    hl(0, 'CmpItemKindTypeParameter',                { link = '@variable.parameter' })
end

return theme
